#include <iostream>
using namespace std;

struct node
{
	int data;
	struct node *next;
};

class stack
{
	node*top;
	public:
	stack()
	{
		top=NULL;
	}
	int isEmpty()
	{
		if(top==NULL)
			return 1;
		else
			return 0;
	}
	void push(int x)
	{
		node *p;
		p=new node;
		p->data= x;
		p->next= top;
		top =p;
	}
	int pop()
	{
		int x;
		node*temp;
		x=top->data;
		temp=top;
		top=top->next;
		delete temp;
		return x;
	}
	int topdata()
	{
		return top->data;
	}
	void display()
	{
		node*temp;
		temp=top;
		while(temp!=NULL)
		{
			cout<<temp-> data<<"\t";
			temp=temp->next;
		}
	}
};

/*int main()
{
	int a,r;
	stack s1;
	int ch;
	do
	{
		cout<<"\nMenu";
		cout<<"\n1.Push";
		cout<<"\n2.POP";
		cout<<"\n3.Display";
		cout<<"\n4.Exit";
		cout<<"\nEnter your choice: ";
		cin>>ch;
		
		switch(ch)
		{
			case 1:cout<<"\nEnter int: ";
				cin>>a;
				s1.push(a);
				s1.display();
				break;
				
			case 2:if(s1.isEmpty())
					cout<<"---stack empty---";
				else 
				{
					r=s1.pop();
					cout<<"\nPopped data: "<<r;
					cout<<"\nstack after pop: ";
				}
				s1.display();
				break;
				
			case 3:s1.display();
				break;
		}
	}while(ch!=4);
	return 0;
}*/





#include<iostream>
#include<string.h>
#include<stdlib.h>
#include<math.h>

class post
{
	public:
	void inf2pof(char inf[],char pof[],int ch);
	int isp(char x);
	int icp(char x);
	void inf2pre(char inf[],char pre[]);
	void strrev(char inf[]);
	float posteval(char post[]);
	float eval(char x,float x1,float x2);
	float pre_eval(char pre[]);
};

int post :: icp(char x)
{
	switch(x)
	{
	case'+':
	case'-': return 1;
	case'*':
	case'/':
	case'%': return 2;
	case'^': return 3;
	case'(': return 4;
	return 5;
	}
}

int post :: isp(char x)
{
	if(x=='(')
	return 0;
	
	else if(x=='+'||x=='-')
	return 1;
	
	else if(x=='*'|| x=='/'||x=='%')
	return 2;
	
	else if(x='^')
	return 3;
	
	return 4;
}

void post :: inf2pof(char inf[],char pof[],int ch)
{
	stack s;
	int i,j=0;
	for(i=0;inf[i]!='\0';i++)
	{
		int x=inf[i];
		if(isalnum(x))
		{
			pof[j++]=x;
		}
		else if(x=='(')
		{
			s.push(x);
		}
		else if(x==')')
		{
			while((x=s.pop())!='(')
			pof[j++]=x;
		}
		else
		{
			switch (ch)
			{
				
			case 1:
				while(!s.isEmpty() && icp(x)<=isp(s.topdata()))
				{
					pof[j++]=s.pop();
				}
				s.push(x);
				break;
			case 2:
				while(!s.isEmpty() && icp(x)<isp(s.topdata()))
				{
					pof[j++]=s.pop();
				}
				s.push(x);
				break;
			}
		}
		
	}	
	
		while(!s.isEmpty())
		{
			pof[j++]=s.pop();
		}
		pof[j]='\0';
	
}


void  post :: strrev(char inf[])
{
	int i=0,j=strlen(inf)-1;
	char temp;
	while(i<j)
	{
		temp=inf[i];
		inf[i]=inf[j];
		inf[j]=temp;
		i++;
		j--;
	}
}

void post :: inf2pre(char inf[],char pre[])
{
	int i;
	strrev(inf);
	//cout<<inf;
	for(i=0;inf[i]!='\0';i++)
	{
		if(inf[i] =='(')
			inf[i]=')';
		else if (inf[i]==')')
		{
			inf[i]='(';
		}
	}	
		inf2pof(inf,pre,2);
		strrev(pre);
	
}

float post :: eval(char x,float x1,float x2)
{
	switch(x)
	{
		case '+': return x1+x2;
		case '-': return x1-x2;
		case '*': return x1*x2;
		case '/': return x1/x2;
		case '%': return (int)x1%(int)x2;
		case '^': return pow(x1,x2);
	}
	return -1;
}

float post :: posteval(char post[])
{
	float x,op1,op2,val;
	stack s;
	for(int i=0;post[i]!='\0';i++)
	{
		x=post[i];
		if(isalpha(x))
		{
			cout<<"\n Enter the value of x";
			cin>>val;
			s.push(val);
		}
		else if(isdigit(x))
		{
			s.push(x-48);
		}
		else
		{
			op2=s.pop();
			op1=s.pop();
			val=eval(x,op1,op2);
			s.push(val);

		}
	}
	val=s.pop();
	return val;
}

float post :: pre_eval(char pre[])
{
	float x,op1,op2,val;
	stack s;
	for(int i=strlen(pre)-1;i>=0;i--)
	{
		x=pre[i];
		if(isalpha(x))
		{
			cout<<"\n Enter the value of x";
			cin>>val;
			s.push(val);
		}
		else if(isdigit(x))
		{
			s.push(x-48);
		}
		else
		{
			op1=s.pop();
			op2=s.pop();
			val=eval(x,op1,op2);
			s.push(val);

		}
	}
	val=s.pop();
	return val;
}

int main()
{
	post p;
	char a[20],post[20],pre[20],inf[20];
	int val,ch,k;
	while(1)
	{
		cout<<"\n Menu";
		cout<<"\n1.Infix to Postfix"; 
		cout<<"\n2.Infix to Prefix";
		cout<<"\n3.Postfix Evaluation";
		cout<<"\n4.Prefix Evaluation";
		cout<<"\n5.Exit";
		cout<<"\nEnter your choice";
			cin>>ch;
			switch(ch)
			{
				case 1:cout<<"Enter the infix expression";
						cin>>a;
						p.inf2pof(a,post,1);
						cout<<"post fix ="<<post;
						break;

				case 2: cout<<"\n Enter infix expression";
						cin>>a;
						p.inf2pre(a,pre);
						cout<<"pre fix ="<<pre;
						break;

				case 3: cout<<"\n Enter the postfix expression";
						cin>>post;
						val=p.posteval(post);
						cout<<"Value of th postfix expression is"<<val;
						break;

				case 4: cout<<"\n Enter the prefix expression";
						cin>>pre;
						val=p.pre_eval(pre);
						cout<<"Value of the prefix expression is"<<val;
						break;

				case 5:exit(0);
			}
	}
	return 0;
}
